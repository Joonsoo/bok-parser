@ClassParam(name, typeDesc)
@TypeDef { ClassDef }
@Elem { Symbol, Processor }

Grammar = WS (TypeDefs WS)? Rules WS {@Grammar($1$0, $2)}
TypeDefs = TypeDef (WS TypeDef)* @{[$0] ++ $1$1}
Rules = Rule (WS Rule)* @{[$0] ++ $1$1}

TypeDef = '@' ClassDef
  | '@' SuperDef
ClassDef = TypeName WS '(' WS (ClassParams WS)? ')' {@ClassDef(name=$0, params=$4$0)}
SuperDef = TypeName WS '{' WS (SubTypes WS)? '}' {@SuperDef<TypeDef>(name=$0, subtypes=$4$0)}
ClassParams = ClassParam (WS ',' WS ClassParam)* {[$0] ++ $1$3}
ClassParam = ParamName (WS ':' WS TypeDesc)? {ClassParam($0, $1$3)}
ParamName = Id
TypeDesc = ValueTypeDesc (WS '?')?
ValueTypeDesc = TypeName
  | '[' WS TypeDesc WS ']'
  | '{' WS EnumList WS '}'
EnumList = StringLiteral (WS ',' WS StringLiteral)*
SubTypes = SubType (WS ',' WS SubType)*
SubType = StringLiteral | TypeName | ClassDef | SuperDef

Rule = LHS WS '=' WS RHSs {@Rule($0, $4)}
LHS = Nonterminal (WS ':' WS TypeDesc)?
RHSs = RHS (WS '|' WS RHS)* {[$0] ++ $1$3}
RHS = Elem (WS Elem)* {[$0] ++ $1$1}
Elem = Symbol | Processor



TypeDef = '@' ClassDef
  | '@' SuperDef

TerminalChar = .-'\\'
    | '\\' '\"\'\\bnrt'
    | UnicodeChar
