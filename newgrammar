Grammar = WS Def [WS Def]* WS
Def = Rule | TypeDef

TypeDef = '@' ClassDef
  | '@' SuperDef
ClassDef = TypeName WS '(' WS [ClassParams WS]? ')'
SuperDef = TypeName WS '{' WS [SubTypes WS]? '}'
TypeName = Id
ClassParams = ClassParam [WS ',' WS ClassParam]*
ClassParam = ParamName [WS ':' WS TypeDesc]?
ParamName = Id
TypeDesc = ValueTypeDesc [WS '?']?
ValueTypeDesc = TypeName
  | OnTheFlyTypeDef
  | '[' WS TypeDesc WS ']'
SubTypes = SubType [WS ',' WS SubType]*
SubType = TypeName | ClassDef | SuperDef

OnTheFlyTypeDef = '@' WS TypeName [WS SuperTypes]?
SuperTypes = '<' WS TypeName [WS ',' WS TypeName]* WS '>'

Rule = LHS WS '=' WS RHSs
LHS = Nonterminal [WS ':' WS TypeDesc]?
RHSs = RHS [WS '|' WS RHS]*
RHS = Elem [WS Elem]*
Elem = Processor | Symbol

Processor = Ref
  | '{' WS PExpr WS '}'
PExpr = PExpr WS BinOp WS PTerm
  | PTerm
BinOp = <("+" | "++")>
PTerm = Ref
  | BoundPExpr
  | ConstructExpr
  | '(' WS PExpr WS ')'
  | '[' WS [PExpr [WS ',' WS PExpr]* WS]? ']'
Ref = '$' RefIdx
BoundPExpr = '$' RefIdx BoundedPExpr
BoundedPExpr = Ref
  | BoundPExpr
  | '{' WS PExpr WS '}'
ConstructExpr = TypeName WS ConstructParams
  | OnTheFlyTypeDefConstructExpr
ConstructParams = '(' WS [PExpr [WS ',' WS PExpr]* WS]? ')'
OnTheFlyTypeDefConstructExpr = OnTheFlyTypeDef WS ConstructParamsWithType
ConstructParamsWithType = '(' WS [PExprWithType [WS ',' WS PExprWithType]* WS]? ')'
PExprWithType = ParamName [WS ':' WS TypeDesc]? WS '=' PExpr

Symbol = BinSymbol
BinSymbol = BinSymbol WS '&' WS PreUnSymbol
  | BinSymbol WS '-' WS PreUnSymbol
  | PreUnSymbol
PreUnSymbol = '^' WS PreUnSymbol
  | '!' WS PreUnSymbol
  | PostUnSymbol
PostUnSymbol = PostUnSymbol WS '?'
  | PostUnSymbol WS '*'
  | PostUnSymbol WS '+'
  | AtomSymbol
AtomSymbol = Terminal
  | TerminalChoice
  | StringLiteral
  | Nonterminal
  | '(' InPlaceChoice ')'
  | '<' InPlaceChoice '>'
  | EmptySequence
InPlaceChoice = InPlaceSequence [WS '|' WS InPlaceSequence]*
InPlaceSequence = Symbol [WS Symbol]*
EmptySequence = '#'
Nonterminal = Id
Terminal = '\'' TerminalChar '\''
  | '.'
TerminalChoice = '\'' TerminalChoiceElem TerminalChoiceElem+ '\''
  | '\'' TerminalChoiceRange '\''
TerminalChoiceElem = TerminalChoiceChar | TerminalChoiceRange
TerminalChoiceRange = TerminalChoiceChar '-' TerminalChoiceChar
StringLiteral = '"' StringChar* '"'

UnicodeChar = '\\' 'u' {0-9A-Fa-f} {0-9A-Fa-f} {0-9A-Fa-f} {0-9A-Fa-f}
TerminalChar = .-{\\}
  | '\\' {\'\\bnrt}
  | UnicodeChar
TerminalChoiceChar = .-{\'\-\\}
  | '\\' {\'\-\\bnrt}
  | UnicodeChar
StringChar = .-{"\\}
  | '\\' {"\\bnrt}
  | UnicodeChar

StringLiteral = '"' StringChar* '"'
RefIdx = <('0' | [{1-9} {0-9}*])>
Id = <[{a-zA-Z} {a-zA-Z0-9}*]>
WS = ({ \n\r\t} | LineComment)*
LineComment = '/' '/' (.-'\n')* (EOF | '\n')
EOF = !.
