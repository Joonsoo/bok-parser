Grammar = WS Def (WS Def)* WS {@Grammar(defs=[$1 ++ $2$1])}
Def: @Def = Rule | TypeDef

TypeDef: @TypeDef = '@' ClassDef
  | '@' SuperDef
ClassDef = TypeName WS '(' WS (ClassParams WS)? ')' {@ClassDef(typeName=$0, params=$4$0)}
SuperDef = TypeName WS '{' WS (SubTypes WS)? '}' {@SuperDef(typeName=$0, subs=$4$0)}
TypeName = Id
ClassParams = ClassParam (WS ',' WS ClassParam)* {[$0] ++ $1$3}
ClassParam = ParamName (WS ':' WS TypeDesc)? {@ClassParam(name=$0, typeDesc=$1$3)}
ParamName = Id
TypeDesc = ValueTypeDesc (WS '?')? {@TypeDesc(type=$0, optional:bool=$1)}
ValueTypeDesc: @ValueTypeDesc = TypeName
  | OnTheFlyTypeDef
  | '[' WS TypeDesc WS ']' $2
SubTypes = SubType (WS ',' WS SubType)*
SubType: @SubType = TypeName | ClassDef | SuperDef

OnTheFlyTypeDef = '@' WS TypeName (WS OnTheFlySuperTypes)? {@OnTheFlyTypeDef(name=$2, supers=$4$1)}
OnTheFlySuperTypes = '<' WS TypeName (WS ',' WS TypeName)* WS '>' {[$2] ++ $3$3}

Rule = LHS WS '=' WS RHSs {@Rule(lhs=$0, rhs=$4)}
LHS = Nonterminal (WS ':' WS TypeDesc)? {@LHS(name=$0, typeDesc=$1$3)}
RHSs = RHS (WS '|' WS RHS)* {[$0] ++ $1$3}
RHS: [Elem] = Elem (WS Elem)* {[$0] ++ $1$1}
Elem: @Elem = Processor | Symbol

Processor: @Processor = Ref
  | '{' WS PExpr WS '}' $2
PExpr: @PExpr = PExpr WS BinOp WS PTerm {@BinOpExpr(op=$2, lhs=$0, rhs=$1)}
  | PTerm
BinOp = <"+" | "++">
PTerm: @PTerm = Ref
  | BoundPExpr
  | ConstructExpr
  | '(' WS PExpr WS ')' {@PTermParen(expr=$2)}
  | '[' WS (PExpr (WS ',' WS PExpr)* WS)? ']' {@PTermSeq(elems=$2{[$0] ++ $1$3})}
Ref = '$' RefIdx {@Ref(idx=$1)}
BoundPExpr = Ref BoundedPExpr {@BoundPExpr(ctx=$0, expr:@BoundedPExpr=$1)}
// type(BoundedPExpr)는 모두 BoundedPExpr의 subclass여야 함
BoundedPExpr = Ref
  | BoundPExpr
  | '{' WS PExpr WS '}' $2
// Ref, BoundPExpr, PExpr은 모두 BoundedPExpr의 subclass여야 함
ConstructExpr: @AbstractConstructExpr = TypeName WS ConstructParams {@ConstructExpr(type=$0, params=$2)}
  | OnTheFlyTypeDefConstructExpr
ConstructParams = '(' WS (PExpr (WS ',' WS PExpr)* WS)? ')' {$2{[$0] ++ $1$3}}
OnTheFlyTypeDefConstructExpr = OnTheFlyTypeDef WS NamedParams {@OnTheFlyTypeDefConstructExpr(typeDef=$0, params=$2)}
NamedParams = '(' WS (NamedParam (WS ',' WS NamedParam)* WS)? ')' {$2{[$0] ++ $1$3}}
NamedParam = ParamName (WS ':' WS TypeDesc)? WS '=' PExpr {@NamedParam(name=$0, typeDesc=$1$3, expr=$4)}

Symbol: @Symbol = BinSymbol
BinSymbol: @BinSymbol = BinSymbol WS '&' WS PreUnSymbol {@JoinSymbol(symbol1=$0, symbol2=$4)}
  | BinSymbol WS '-' WS PreUnSymbol {@ExceptSymbol(symbol1=$0, symbol2=$4)}
  | PreUnSymbol
PreUnSymbol: @PreUnSymbol = '^' WS PreUnSymbol {@FollowedBy(expr=$2)}
  | '!' WS PreUnSymbol {@NotFollowedBy(expr=$2)}
  | PostUnSymbol
PostUnSymbol: @PostUnSymbol = PostUnSymbol WS ('?' | '*' | '+') {@Repeat(expr=$0, repeat=$2)}
  | AtomSymbol
AtomSymbol: @AtomSymbol = Terminal
  | TerminalChoice
  | StringLiteral
  | Nonterminal
  | '(' InPlaceChoice ')' {@Paren(choice=$1)}
  | '<' InPlaceChoice '>' {@Longest(choice=$1)}
  | EmptySequence {@EmptySeq()}
InPlaceChoices = InPlaceSequence (WS '|' WS InPlaceSequence)* {$InPlaceChoices(choices=[$0] ++ $1$3)}
InPlaceSequence = Symbol (WS Symbol)* {@InPlaceSequence(seq=[$0] ++ $1$1)}
EmptySequence = '#'
Nonterminal = Id {@Nonterminal(name=$0)}
Terminal: @Terminal = '\'' TerminalChar '\'' {@TerminalChar(char=$2)}
  | '.' {@AnyTerminal()}
@TerminalChoice(choices: [TerminalChoiceElem])
TerminalChoice = '\'' TerminalChoiceElem TerminalChoiceElem+ '\'' {TerminalChoice([$1] ++ $2)}
  | '\'' TerminalChoiceRange '\'' {TerminalChoice([$1])}
TerminalChoiceElem: @TerminalChoiceElem = TerminalChoiceChar | TerminalChoiceRange
TerminalChoiceRange = TerminalChoiceChar '-' TerminalChoiceChar {@TerminalChoiceRange(start=$0, end=$2)}
StringLiteral = '"' StringChar* '"' {@StringLiteral(value=$1)}

UnicodeChar = '\\' 'u' '0-9A-Fa-f' '0-9A-Fa-f' '0-9A-Fa-f' '0-9A-Fa-f'
TerminalChar = .-'\\'
  | '\\' '\'\\bnrt'
  | UnicodeChar
TerminalChoiceChar = .-'\'\-\\'
  | '\\' '\'\-\\bnrt'
  | UnicodeChar
StringChar = .-'"\\'
  | '\\' '"\\bnrt'
  | UnicodeChar

StringLiteral = '"' StringChar* '"'
RefIdx = <'0' | '1-9' '0-9'*>
Id = <'a-zA-Z' 'a-zA-Z0-9'*>
WS = (' \n\r\t' | LineComment)*
LineComment = '/' '/' (.-'\n')* (EOF | '\n')
EOF = !.
